#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <gmp.h>

#define SSIZE 100000
#define FALSE 0
#define TRUE 1
typedef char BOOL;

static mpz_t NN, TT, DD, RR, VV, PP, XX, YY, DG, IG, AA, BB;
static mpz_t *x, *y, *z, *w;
static unsigned int **EE, **G;
static int *epr, *r1, *r2, *rp, *b, *pr, *e, *hash;
static unsigned char *logp, *sieve;
static int mm, mlf, jj, nbts, nlp, lp, hmod, hmod2;
static BOOL partial;
static mpz_t *mip;

int knuth(int mm, int *epr, mpz_t N, mpz_t D)
{
	double dp, fks, top;
	BOOL found;
	int i, j, bk, nk, kk, r, p;
	static int K[] = {0, 1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 0};
	top = -10.0e0;
	found = FALSE;
	nk = 0;
	bk = 0;
	epr[0] = 1;
	epr[1] = 2;
	do
	{
		kk = K[++nk];
		if(kk == 0)
		{
			kk = K[bk];
			found = TRUE;
		}
		mpz_mul_si(D, N, kk);
		fks = log(2.0)/2.0;
		r = mpz_mod_ui(TT, D, 8);
		if(r == 1) fks *= 4.0;
		if(r == 5) fks *= 2.0;
		fks -= log(((double)kk) / 2.0);
		i = 0;
		j = 1;
		while(j < mm)
		{
			p = mip->PRIMES[++i];
			r = mpz_mod_ui(TT, D, p);
			if(
